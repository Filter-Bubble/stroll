<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">

  <title>Entity based coreference</title>
  <meta name="doc_id" content="docid">

  <style>
    .whenOver {
      background-color: #f90;
    }
    span {
      text-decoration: underline;
    }
    ._ {
      text-decoration: none;
    }
    p {
      margin-top: 0em;
      margin-bottom: 0em;
    }
    .role {
      font-variant: all-petite-caps;
      font-weight: bold;
      text-decoration: none;
      margin: 0.2em;
      color: red;
      font-size: xx-small;
    }
    .frame {
      font-variant: all-petite-caps;
      text-decoration: none;
      color: cornflowerblue;
      font-size: xx-small;
    }
  </style>

</head>

<body>
  {% for doc in documents %}
  <h1>Document {{ doc.doc_id }} </h1>
    {% for sentence in doc.sentences %}
      <p>
      {% for token in sentence %}
          {% if token.FRAME != '_' %}
            <span class="frame"> FRAME </span>
          {% endif %}
          {% if token.ROLE != '_' %}
            <span class="role"> {{ token.ROLE }} </span>
          {% endif %}
        {% if token.COREF != '_' and token.COREF != '-' %}
          {% for REF in token.COREF.split('|') %}
            {% if REF[0] == '(' %}
              <span class="{{ REF | trim(chars='()|') }}">
            {% endif %}
          {% endfor %}

          {{ token.FORM }}

          {% for REF in token.COREF.split('|') %}
            {% if REF[-1] == ')' %}
              </span>
            {% endif %}
          {% endfor %}
        {% else %}

          {{ token.FORM }}

        {% endif %}
      {% endfor %}
      </p>
    {% endfor %}
  {% endfor %}

  <script type="text/javascript">
    // Copy-pasted from:
    // https://stackoverflow.com/questions/15960544/highlight-all-elements-with-same-class-when-one-of-them-is-moused-over
    // extending the Object prototype to allow chaining of this method,
    // 'over' : String, the class-name to add when the element(s) of the
    // HTMLCollection/NodeList are hovered-over. We also set the default
    // value of the 'over' variable in order that a class-name will always
    // be present:
    Object.prototype.classHighlight = function(over = 'over') {

      // taking the 'this' and using the spread operator to expand
      // the iterable collection to an Array:
      const that = [...this],

        // creating a named function to act as the event-handler for
        // 'mouseenter' and 'mouseleave':
        toggleHighlight = (event) => {
          // iterating over the array using Array.prototype.forEach():
          that.forEach(

            // we're not using 'this' in here, so using an Arrow function
            // to use the Element.classList API to toggle the supplied
            // class on each element of the collection. If the event-type
            // is exactly equal to 'mouseenter' we add the class otherwise
            // we remove the class:
            (el) => el.classList.toggle(over, event.type === 'mouseenter')
          );
        };
      // iterating over the collection, again using Array.prototype.forEach():
      that.forEach(
        // and another Arrow function:
        (element) => {

          // here we bind the toggleHighlight function - created above - as
          // the event-handler for both the 'mouseenter' and 'mouseleave'
          // events:
          element.addEventListener('mouseenter', toggleHighlight);
          element.addEventListener('mouseleave', toggleHighlight);
        });
    };

    // here we use document.getElementsByClassName() to retrieve an HTMLCollection
    // of elements matching the supplied class-name; and then using chaining - which
    // is why we extended the Object prototype - to pass that HTMLCollection to
    // the classHighlight() function:
    {% for entity in entities %}
      document.getElementsByClassName('{{ entity }}').classHighlight('whenOver');
    {% endfor %}
  </script>
</body>
</html>
